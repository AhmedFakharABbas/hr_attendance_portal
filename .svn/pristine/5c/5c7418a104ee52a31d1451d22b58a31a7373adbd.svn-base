import { Component, OnInit, Input, ViewChild } from "@angular/core";
import { MatSort } from "@angular/material/sort";
import { MatTableDataSource } from "@angular/material/table";
import { CorrectionStatus } from "../../../shared/interfaces/correction-status";
import { EmployeeGrievance } from "../../../shared/interfaces/employee grievance";

import { GrievanceService } from "../grievance.service";
const APPLICATIONS_DATA: any[] = [
  {
    id: 132,
    name: "Jack reacher",
    grievanceAgainst: "Miller",
    grievanceAgainstId: 32423,
    applicationDate: "25-Nov-2020",
    type: "Grievance",
    from: "25-Nov-2020",
    to: "25-Nov-2020",
    status: "Approved",
  },
  {
    id: 132,
    name: "Jack reacher",
    grievanceAgainst: "Miller",
    grievanceAgainstId: 32423,
    applicationDate: "25-Nov-2020",
    type: "Grievance",
    from: "25-Nov-2020",
    to: "25-Nov-2020",
    status: "Pending",
  },
  {
    id: 132,
    name: "Jack reacher",
    grievanceAgainst: "Miller",
    grievanceAgainstId: 32423,
    applicationDate: "25-Nov-2020",
    type: "Grievance",
    from: "25-Nov-2020",
    to: "25-Nov-2020",
    status: "Pending",
  },
  {
    id: 132,
    name: "Jack reacher",
    grievanceAgainst: "Miller",
    grievanceAgainstId: 32423,
    applicationDate: "25-Nov-2020",
    type: "Grievance",
    from: "25-Nov-2020",
    to: "25-Nov-2020",
    status: "Approved",
  },
];
const STATUS_DATA: CorrectionStatus[] = [
  {
    month: "January",
    corrections: "21",
    approved: "4",
    pending: "0",
    rejected: "8",
  },
  {
    month: "February",
    corrections: "8",
    approved: "1.5",
    pending: "5",
    rejected: "8",
  },
  {
    month: "March",
    corrections: "8",
    approved: "2.25",
    pending: "0",
    rejected: "0",
  },
  {
    month: "April",
    corrections: "15",
    approved: "0",
    pending: "0",
    rejected: "0",
  },
  {
    month: "May",
    corrections: "-",
    approved: "0",
    pending: "0",
    rejected: "5",
  },
  {
    month: "June",
    corrections: "-",
    approved: "1",
    pending: "5",
    rejected: "5",
  },
  {
    month: "July",
    corrections: "-",
    approved: "0",
    pending: "5",
    rejected: "5",
  },
  {
    month: "Auguest",
    corrections: "8",
    approved: "5",
    pending: "0",
    rejected: "0",
  },
  {
    month: "September",
    corrections: "8",
    approved: "0",
    pending: "0",
    rejected: "0",
  },
  {
    month: "October",
    corrections: "15",
    approved: "8",
    pending: "0",
    rejected: "0",
  },
  {
    month: "November",
    corrections: "8",
    approved: "0",
    pending: "2",
    rejected: "2",
  },
  {
    month: "December",
    corrections: "8",
    approved: "0",
    pending: "2",
    rejected: "2",
  },
];

@Component({
  selector: "app-grievance-table",
  templateUrl: "./grievance-table.component.html",
  styleUrls: ["./grievance-table.component.css"],
})
export class GrievanceTableComponent implements OnInit {
  constructor(private _grievanceService: GrievanceService) {}

  @Input() applicationType;
  selectedValue: string;
  selectedCar: string;
  @ViewChild(MatSort) sort: MatSort;

  //tatusColumns: string[] = ['employeeId','employeeName', 'grievanceAgainstName', 'applicationDate', 'type', 'from', 'to', 'status'];

  //applicationColums: string[] = ['id','name', 'grievanceAgainst', 'applicationDate', 'type', 'from', 'to', 'status'];

  columnsToDisplay: string[];
  dataSource = new MatTableDataSource();
  tableURL: string;
  allApplications: any;

  ngOnInit(): void {
   this.getMetaData();
  }
  getMetaData(){
    console.log(this.applicationType.ComponenttypeId);
    if (this.applicationType.type == "Emp-portal") {
      this.getEmployeePortalData();
    } else if (this.applicationType.type == "hrPortalEnquiries") {
      this.getHrEnquires();
    } else if (this.applicationType.type == "lmPortalEnquiries") {
      this.getLmEnquires();
    }
  }
  getEmployeePortalData() {
    this.tableURL = "/get_grievance_applicaitons_list&page=1";
    this.columnsToDisplay = [
      "employee_id",
      "against_employee_name",
      "application_date",
      "type",
      "grievance_from",
      "grievance_to",
      "application_status",
    ];
    this.getGrievanceApplicaitonsData("/get_grievance_applicaitons_list&page=1");
    // let columns=this.applicationColums.splice(1,1)
    // console.log(columns);
    // this.columnsToDisplay=[...this.applicationColums]
  }
  getHrEnquires() {
    this.tableURL = "/get_grievance_applicaitons_list&page=1";
    this.columnsToDisplay = [
      "employee_id",
      "against_employee_name",
      "application_date",
      "type",
      "grievance_from",
      "grievance_to",
      "application_status",
    ];
    this.getGrievanceApplicaitonsData("/get_grievance_applicaitons_list&page=1");
  }
  getLmEnquires() {
    this.tableURL = "/get_grievance_applicaitons_list&page=1";
    this.columnsToDisplay = [
      "employee_id",
      "against_employee_name",
      "application_date",
      "type",
      "grievance_from",
      "grievance_to",
      "application_status",
    ];
    this.getGrievanceApplicaitonsData("/get_grievance_applicaitons_list&page=1");
  }
  getGrievanceApplicaitonsData(url) {
    console.log(url);
    //to get data for  emp portal form
    this._grievanceService.getData(url).subscribe({
      next: (res: any) => {
        console.log(res);
        let serverData = res[0];
        this.dataSource.data = this.dataSource.data.concat(serverData.data.data);
        this.dataSource.sort = this.sort;
        // this.allDesignations = serverData.Designation;
        // this.grievanceForm.patchValue(serverData.employee);
      },
      error: (error) => {
        console.log(error);
      },
    });
  }
  //on scroll event
  onTableScroll(e){
    const tableViewHeight = e.target.offsetHeight; // viewport: ~500px
    const tableScrollHeight = e.target.scrollHeight; // length of all table
    const scrollLocation = e.target.scrollTop; // how far user scrolled

    // If the user has scrolled within 200px of the bottom, add more data
    const buffer = 200;
    const limit = tableScrollHeight - tableViewHeight - buffer;
    if (scrollLocation > limit) {
      this.getGrievanceApplicaitonsData(this.tableURL);
    }
  }
}
